#! /usr/bin/python
# -*- coding:utf-8
import sys
from datetime import date
from itools.fs import lfs
from itools.handlers import RWDatabase
from itools.odf.odf import stl_to_odt, ODTFile
import pancito

class Struct:
    def __init__(self, **entries):
        self.__dict__.update(entries)

conn = pancito.opendb()
c = conn.cursor()
contractId = int(sys.argv[1])
c.execute("SELECT * FROM user INNER JOIN contract ON contract.id = ? WHERE user.id IN (SELECT user_id FROM adhesionorder WHERE contract_id = ?)", (contractId, contractId))
db = pancito.db.DBManager(conn)
users = [db.toDisplayContract(x) for x in c.fetchall()]
# Load the model

for user in users:
    for field in ('startdate', 'enddate'):
        user[field] = user[field].strftime("%d %B %Y")
    c.execute("SELECT sum(quantity) AS quantity, * FROM bakeorder INNER JOIN bake ON bake.rowid = bakeid INNER JOIN product ON product.id = productid WHERE contract_id = ? AND userid = ? GROUP BY productid", (contractId, user['id']))
    orders = c.fetchall()
    if len(orders) == 0:
        print "No order for %s, skipping" % user['name']
        continue
    info = Struct(**user)
    info.date = date.today().strftime("%d %B %Y")
    c.execute("SELECT count(*) FROM bake WHERE contract_id = ?", (contractId,))
    info.bakeCount = c.fetchone()[0]

    # FIXME
    orderdisplays = []
    orderAmount = 0
    for order in orders:
        orderdisplays.append("%s %s" % (order['quantity'], order['name']))
        orderAmount += order['quantity'] * order['itemprice']
    info.order = " et ".join(orderdisplays)
    info.balance = pancito.displayAmount(orderAmount - user['balance'])

    print "Writing contract for", user['name']
    rw_database = RWDatabase(fs=lfs)
    handler = rw_database.get_handler('data/model.odt')
    document = stl_to_odt(handler, info)
    handler = ODTFile(string=document)
    rw_database.set_handler(('tmp/Contrat %s.odt' % user['name']).encode('utf-8'), handler)
    rw_database.save_changes()
